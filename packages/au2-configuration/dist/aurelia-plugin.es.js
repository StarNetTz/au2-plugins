import{DI,Registration}from"@aurelia/kernel";import{IWindow}from"@aurelia/runtime-html";import{IHttpClient}from"@aurelia/fetch-client";import{AppTask}from"aurelia";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function __param(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}}const IAureliaConfigurationOptions=DI.createInterface("IAureliaConfigurationOptions"),DefaultAureliaConfigurationOptions={dir:"config",file:"config.json"};const IAureliaConfiguration=DI.createInterface("IAureliaConfiguration");let AureliaConfiguration=class{http;settings;win;Config;constructor(http,settings,win){this.http=http,this.settings=settings,this.win=win}async get(key){return this.getDictValue(this.Config,key)}async init(){const resp=await this.http.fetch(class{static create(win,settings){return win.location.protocol+`/${settings.dir}/${settings.file}`}}.create(this.win,this.settings));this.Config=await resp.json()}getDictValue(baseObject,key){const splitKey=key.split(".");let currentObject=baseObject;return splitKey.forEach((key=>{if(!currentObject[key])throw new Error("Key "+key+" not found");currentObject=currentObject[key]})),currentObject}};AureliaConfiguration=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r}([__param(0,IHttpClient),__param(1,IAureliaConfigurationOptions),__param(2,IWindow),function(metadataKey,metadataValue){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(metadataKey,metadataValue)}("design:paramtypes",[Object,Object,Object])],AureliaConfiguration);const AureliaConfigurationConfiguration=function createAureliaConfiguration(options){return{register(container){const mergedOptions={...DefaultAureliaConfigurationOptions,...options};return container.register(Registration.instance(IAureliaConfigurationOptions,mergedOptions),Registration.singleton(IAureliaConfiguration,AureliaConfiguration),AppTask.beforeCreate(IAureliaConfiguration,(async plugin=>{console.log("inicijalizacija bato"),await plugin.init()})))},configure:options=>createAureliaConfiguration(options)}}({});export{AureliaConfiguration,AureliaConfigurationConfiguration,DefaultAureliaConfigurationOptions,IAureliaConfiguration,IAureliaConfigurationOptions};
